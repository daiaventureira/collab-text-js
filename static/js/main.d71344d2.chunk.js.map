{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","text","handleReceiveNewText","setState","handleChange","e","target","value","sub","send","id","window","fetch","then","data","json","res","cable","ActionCable","createConsumer","this","subscriptions","create","received","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAqCeA,E,4MAhCbC,MAAQ,CAAEC,KAAM,I,EAiBhBC,qBAAuB,YAAe,IAAZD,EAAW,EAAXA,KACpBA,IAAS,EAAKD,MAAMC,MACtB,EAAKE,SAAS,CAAEF,U,EAIpBG,aAAe,SAACC,GACd,EAAKF,SAAS,CAAEF,KAAMI,EAAEC,OAAOC,QAC/B,EAAKC,IAAIC,KAAK,CAAER,KAAMI,EAAEC,OAAOC,MAAOG,GAAI,K,uDAvB5C,WAAqB,IAAD,OAClBC,OAAOC,MAAM,2CAA2CC,MAAK,SAACC,GAC5DA,EAAKC,OAAOF,MAAK,SAACG,GAChB,EAAKb,SAAS,CAAEF,KAAMe,EAAIf,aAI9B,IAAMgB,EAAQC,IAAYC,eACxB,gDAEFC,KAAKZ,IAAMS,EAAMI,cAAcC,OAAO,eAAgB,CACpDC,SAAUH,KAAKlB,yB,oBAenB,WACE,OAAO,0BAAUK,MAAOa,KAAKpB,MAAMC,KAAMuB,SAAUJ,KAAKhB,mB,GA9B1CqB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d71344d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ActionCable from \"actioncable\";\n\nclass App extends Component {\n  state = { text: \"\" };\n\n  componentDidMount() {\n    window.fetch(\"https://collab-text.herokuapp.com/notes\").then((data) => {\n      data.json().then((res) => {\n        this.setState({ text: res.text });\n      });\n    });\n\n    const cable = ActionCable.createConsumer(\n      \"wss://collab-text.herokuapp.com/notes//cable\"\n    );\n    this.sub = cable.subscriptions.create(\"NotesChannel\", {\n      received: this.handleReceiveNewText,\n    });\n  }\n\n  handleReceiveNewText = ({ text }) => {\n    if (text !== this.state.text) {\n      this.setState({ text });\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({ text: e.target.value });\n    this.sub.send({ text: e.target.value, id: 1 });\n  };\n\n  render() {\n    return <textarea value={this.state.text} onChange={this.handleChange} />;\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}